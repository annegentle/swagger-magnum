{
    "swagger": "2.0",
    "info": {
        "title": "OpenStack Containers REST API",
        "version": "1.0",
        "description": "This REST API provides an abstraction layer to container management solutions such as Docker Swarm, Google Kubernetes, and Apache Mesos."
    },
    "consumes": [
        "application/json"
        ],
    "produces": [
        "application/json"
        ],
    "paths": {
        "/baymodels": {
            "get": {
                "description": "Retrieve a list of bay models",
                "responses": {
                        "200": {
                        "description": "A collection of bay models",
                        "schema": {
                            "type": "array",
                                "items": {
                                "description": "Represents an existing bay model",
                                "allOf": [
                                  {
                                     "type": "object",
                                     "description": "Represents a new bay model about to be created",
                                     "properties": {
                                         "$ref": "#properties/BayModel"
                                            }
                                         }
                                         ]
                                    }
                                  }
                          },
                          "parameters": {
                             "$ref": "#/parameters/BayModel"
                                       }
                          },
                          "examples": {
                            "application/json": {
                                "baymodels":
                                           {"uuid": "27e3153e-d5bf-4b7e-b517-fb518e17f34c",
                                            "name": "example",
                                            "image_id": "Fedora-k8s",
                                            "apiserver_port": 8080,
                                            "coe": "kubernetes"
                                            }
                                                 }
                          }
        }, 
            "post": {
               "description": "Create a new bay model",
               "responses": {
                "201": {
                    "description": "Indicates a successful creation",
                    "schema": {
                        "description": "Represents an existing bay model.",
                        "allOf": [
                                {
                                "type": "object",
                                "description": "Represents a new bay model about to be created",
                                "properties": {
                                    "$ref": "#properties/BayModel"
                                              }
                                }
                                ]
                            }
                        },
                "400": {
                "$ref": "#/errors/MalformedBody"
  },
                "404": {
                    "$ref": "#/errors/NotFound"
  },
                "409": {
                    "$ref": "#/errors/Conflict"
  },
                "default": {
                    "$ref": "#/errors/BaseError"
                    },
               "parameters": {
                "$ref": "#/parameters/BayModel"
                          }
               }
            }
        },
        "/baymodels/detail": {
                  "get": {
                    "description": "Retrieve a list of baymodels with detailed information",
                    "parameters": {
                                    "$ref": "#/parameters/BayModel"
                                  },
                    "responses": {
                      "200": {
                       "description": "A collection of bay models with detailed information",
                       
                       "schema": {
                               "type": "array",
                               "items": {
                                       "$ref": "#/properties/BayModel"
                                        }
                                },
                       "example": {
                       "application/json": {
                         "baymodels": [
                        {
                        "uuid": "27e3153e-d5bf-4b7e-b517-fb518e17f34c",
                        "name": "example",
                        "image_id": "Fedora-k8s",
                        "flavor_id": "m1.small",
                        "master_flavor_id": "m1.small",
                        "dns_nameserver": "8.8.1.1",
                        "keypair_id": "keypair1",
                        "external_network_id": "ffc44e4a-2319-4062-bce0-9ae1c38b05ba",
                        "fixed_network": "private",
                        "apiserver_port": 8080,
                        "docker_volume_size": 25,
                        "cluster_distro": "fedora-atomic",
                        "ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB",
                        "coe": "kubernetes",
                        "http_proxy": "http://proxy.com:123",
                        "https_proxy": "https://proxy.com:123",
                        "no_proxy": "192.168.0.1,192.168.0.2,192.168.0.3",
                        "created_at": "2015-09-04 10:44:40.885958",
                        "updated_at": "2015-09-04 10:44:40.885958"
                        }
                        ]
                        }
                        }
                        },
                      "default": {
                                    "BaseError": 
                                    {
                                      "$ref": "#/errors/BaseError"
                                    }
                                    }
                                    }
                  }
         },
        "/baymodels/{identifier}": {
             "get": {
                 "description": "Retrieve information about the given bay model.",
                 "parameters": {
                             "$ref":"#/parameters/BayModel"
                               },
                 "responses": {
                    "200": {
                    "description": "A collection of bay models",
                    "schema": {
                        "type": "array",
                        "items": {
                        "description": "Represents an existing bay model",
                        "allOf": {
                        "type": "object",
                        "description": "Represents a new bay model about to be created",
                        "properties": {
                           "$ref": "#properties/BayModel"
                                      }
                                    }
                                  }
                                }
            },
                    "404": {
                    "$ref": "#/errors/NotFound"
                       },
                    "409": {
                    "$ref": "#/errors/Conflict"
                       }
                 }
                 }
                 }
    },
    "parameters": {
                   "BayModel": {
                     "marker": {
                         "name": "marker",
                         "in": "query",
                         "description": "The UUID of the resource to start the collection from.",
                         "type": "string",
                         "format": "uuid"
                       
                     },
                         "limit": {
                           "name": "limit",
                           "in": "query",
                           "description": "Maximum number of resources to return in a single result",
                           "type": "integer"
                                   },
                     "sortKey": {
                         "name": "sortKey",
                         "in": "query",
                         "description": "Column to sort results by",
                         "type": "string",
                         "default": "id"
                     },
                     "sortDir": {
                         "name": "sortDir",
                         "in": "query",
                         "description": "The direction to sort",
                         "type": "string",
                         "enum": [
                             "asc",
                             "desc"
                         ],
                         "default": "asc"
    }
                               }
                               },
    "properties": {
"BayModel": {
    "uuid": {
        "type": "string",
        "description": "Unique UUID for this baymodel",
        "format": "uuid"
    },
    "name": {
        "type": "string",
        "description": "The name of the bay model",
        "minLength": 1,
        "maxLength": 255
    },
    "coe": {
        "type": "string",
        "description": "The Container Orchestration Engine for this bay model",
        "minLength": 1,
        "maxLength": 255,
        "required": true
    },
    "imageId": {
        "type": "string",
        "description": "The image name or UUID to use as a base image for this baymodel",
        "minLength": 1,
        "maxLength": 255,
        "required": true
    },
    "flavorId": {
        "type": "string",
        "description": "The flavor of this bay model",
        "minLength": 1,
        "maxLength": 255
    },
    "masterFlavorId": {
        "type": "string",
        "description": "The flavor of the master node for this bay model",
        "minLength": 1,
        "maxLength": 255
    },
    "dnsNameserver": {
        "type": "string",
        "description": "The flavor of the master node for this bay model",
        "format": "ipv4"
    },
    "keypairId": {
        "description": "The name or id of the nova ssh keypair",
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "required": true
    },
    "externalNetworkId": {
        "description": "The external network to attach the Bay",
        "type": "string",
        "minLength": 1,
        "maxLength": 255
    },
    "fixedNetwork": {
        "description": "The fixed network name to attach the Bay",
        "type": "string",
        "minLength": 1,
        "maxLength": 255
    },
    "apiServerPort": {
        "description": "The API server port for k8s",
        "type": "integer",
        "minumum": 1024,
        "maximum": 65535
    },
    "dockerVolumeSize": {
        "description": "The size in GB of the docker volume",
        "type": "integer",
        "minimum": 1
    },
    "sshAuthorizedKey": {
        "description": "The SSH Authorized Key",
        "type": "string",
        "minimumLength": 1
    },
    "clusterDistro": {
        "description": "The Cluster distro for the bay, ex - coreos, fedora-atomic.",
        "type": "string",
        "minLength": 1,
        "maxLength": 255
    },
    "httpProxy": {
        "description": "http_proxy for the bay",
        "type": "string",
        "minLength": 1,
        "maxLength": 255
    },
    "httpsProxy": {
        "description": "https_proxy for the bay",
        "type": "string",
        "minLength": 1,
        "maxLength": 255
    },
    "noProxy": {
        "description": "Its comma separated list of IP addresses for which proxies should not used in the bay",
        "type": "string",
        "minLength": 1,
        "maxLength": 255
    },
    "updatedAt": {
        "description": "The date and time when the entity was last updated",
        "type": "string",
        "format": "datetime"
    },
    "createdAt": {
        "description": "The date and time when the entity was created",
        "type": "string",
        "format": "datetime"
    }
}
},
    "errors": {
           "BaseError": {
           "description": "An unexpected error occurred"
                        },
           "MalformedBody": {
           "description": "The request contained a malformed JSON body"
                            },
           "NotFound": {
           "description": "Entity was not found"
                       },
           "Conflict": {
           "description": "A conflict occurred. This is usually because you specified a name that is set for multiple entities."
                       }
          }
}

